Microsoft Visual C++ Build Instructions
=======================================

For building under Windows, only the Cygwin/GNU C++ compiler (g++) and
Microsoft's Visual C++ 2005 compiler are currently supported. We plan to
add support for the MinGW compiler in the near future. Please see
README.cygwin for instructions on using the Cygwin/GNU C++ compiler.


Installing Visual C++ 2005 Express Edition:
-------------------------------------------

This whole section can be skipped if you have Visual Studio 2005 (i.e.
not the free Express edition) installed.

To install Visual C++ 2005 Express Edition and the Microsoft Platform
SDK, follow the steps described at the following URL:
http://msdn2.microsoft.com/en-us/express/aa700755.aspx.

In order for the Visual Studio Command Line Compiler to find the necessary
Microsoft Platform SDK files, one more file must be modified: open
"C:\Program Files\Microsoft Visual Studio 8\VC\vcvarsall.bat" in an editor
and add the following lines at the top, after "@echo off":

@set PATH=C:\Program Files\Microsoft Platform SDK for Windows Server 2003 R2\Bin;%PATH%
@set INCLUDE=C:\Program Files\Microsoft Platform SDK for Windows Server 2003 R2\Include;%INCLUDE%
@set LIB=C:\Program Files\Microsoft Platform SDK for Windows Server 2003 R2\Lib;%LIB%


Building Boost with ASIO:
-------------------------

Please see the README.boost file for instructions.

We recommend that you use the bjam tool to build Boost & ASIO for MSVC. 
Open the Visual Studio 2005 Command Prompt, change to the Boost build
directory, and type:

bjam --toolset=msvc --with-thread --with-system --with-filesystem \
	--with-regex --with-date_time --with-unit_test_framework \
	debug release threading=multi stage

You may leave out the "--with" options if you wish to build everything. 

We recommend that you create a C:\Boost directory with C:\Boost\Lib and
C:\Boost\Include subdirectories.  To install Boost into these
directories, just copy the files in stage/lib into C:\Boost\Lib, and
copy the entire boost/ directory into C:\Boost\Include.


Installing zlib & OpenSSL:
--------------------------

ASIO requires zlib and OpenSSL for compression and SSL/TLS encryption
support, respectively.  For MSVC, we recommend that you build and
install these packages from the source tarballs, available from the
following sites:

http://www.zlib.net
http://www.openssl.org

For OpenSSL, build the static versions of ssleay32 and libeay32 (by using
nt.mak rather than ntdll.mak, as explained in INSTALL.W32).  We recommend
installing OpenSSL in C:\OpenSSL.


Linking with OpenSSL:
---------------------

Macro OPENSSL_HOME in pion.vsprops is set to C:\OpenSSL.  If you installed 
OpenSSL somewhere other than C:\OpenSSL, change OPENSSL_HOME accordingly.
If you have both the static and dynamic versions of ssleay32 and libeay32,
make sure OPENSSL_HOME\lib is the directory with the static versions.

Include PION_HAVE_SSL or PION_FULL in Preprocessor Definitions for the project,
or in PionConfig.hpp.win, uncomment '#define PION_HAVE_SSL'.


Logging frameworks:
-------------------

Note that the use of a logging framework is entirely optional, so you
may skip this step if you like.  If no logging option is defined, std::cout 
and std::cerr will be used for logging.  To disable logging, include 
PION_DISABLE_LOGGING in Preprocessor Definitions for the project, or in 
PionConfig.hpp.win, uncomment '#define PION_DISABLE_LOGGING'.

At this time, log4cxx (http://logging.apache.org/log4cxx) is the only 
supported logging library that builds correctly under Windows.

A binary distribution is available at http://atomiclabs.com/files/log4cxx.zip.
Install it in C:\log4cxx, or change LOG4CXX_HOME accordingly (see below).

You can also download the current source code from 
http://svn.atomiclabs.com/log4cxx/trunk
Check out to C:\log4cxx, or change LOG4CXX_HOME accordingly (see below).
Open log4cxx.sln and build everything (or just the configurations you're 
interested in).

Macro LOG4CXX_HOME in pion.vsprops is set to C:\log4cxx.  If you installed 
log4cxx somewhere other than C:\log4cxx, change LOG4CXX_HOME accordingly.

Add <LOG4CXX_HOME>\bin to your path.

Include PION_USE_LOG4CXX or PION_FULL in Preprocessor Definitions for the project,
or in PionConfig.hpp.win, uncomment '#define PION_USE_LOG4CXX'.


Apache Portable Runtime:
------------------------

If you installed log4cxx as described above, then all you need to do is define
PION_HAVE_APR to 1 in PionConfig.hpp.win.

If you installed log4cxx some other way, you will probably need to change 
APR_INCLUDE_DIR (see below).

If you haven't installed apr, and don't want to install log4cxx, you can 
get apr from http://apr.apache.org.  Once you have installed it, or if you
already had it installed other than as part of log4cxx, you will need to 
change APR_INCLUDE_DIR (see below).

Make sure that the directory containing apr.dll and aprd.dll is on your path.
If you installed log4cxx as described in the above readme file, then this
directory is <LOG4CXX_HOME>\bin, which should already be on your path.

To link with the static libraries apr.lib and aprd.lib, you will need to 
have the appropriate directory in 'Additional Library Directories' in the
static configurations of the project file for the executable, e.g. 
PionServiceTest.vcproj.  Again, if you installed log4cxx as described above,
the appropriate directory, $(LOG4CXX_HOME)\bin\static, is already included.

Macro APR_INCLUDE_DIR in pion.vsprops is set to 
$(LOG4CXX_HOME)\src\apr\apr-1.2.9\include.  If you installed apr in any way 
other than as part of log4cxx as described above, you will need to change
$(APR_INCLUDE_DIR) to the appropriate directory.

Finally, in PionConfig.hpp.win, define PION_HAVE_APR to 1.


Building and installing Pion:
-----------------------------

Update the Visual C++ Directories in the Projects and Solutions section
in the Options dialog box.  For Include files add "C:\Boost\Include",
and for Library files add "C:\Boost\Lib".

Now you should be able to build the solution file called pion-<PROJECT>.sln.


Running the test programs:
--------------------------

Make sure "C:\Boost\Lib" is on your path.

If you got the source code from the Subversion repository and haven't yet run
Doxygen, then run Doxygen from "<PION_NET_HOME>\doc\".  (The documentation
is used as part of the Pion Network Library tests.)

To test PionWebServer, try running it from <"PION_NET_HOME>\utils\" with
the following command line args: -c vcservices.conf

To run from within the IDE, go to PionWebServer Property Pages ->
Debugging, and set 'Command Arguments' to the above.
