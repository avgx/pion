Microsoft Visual C++ Build Instructions
=======================================

For building under Windows, only the Cygwin/GNU C++ compiler (g++) and
Microsoft's Visual C++ 2005 compiler are currently supported. We plan to
add support for the MinGW compiler in the near future. Please see
README.cygwin for instructions on using the Cygwin/GNU C++ compiler.


Installing Visual C++ 2005 Express Edition:
-------------------------------------------

This whole section can be skipped if you have Visual Studio 2005 (i.e.
not the free Express edition) installed.

To install Visual C++ 2005 Express Edition and the Microsoft Platform
SDK, follow the steps described at the following URL:
http://msdn2.microsoft.com/en-us/express/aa700755.aspx.

In order for the Visual Studio Command Line Compiler to find the necessary
Microsoft Platform SDK files, one more file must be modified: open
"C:\Program Files\Microsoft Visual Studio 8\VC\vcvarsall.bat" in an editor
and add the following lines at the top, after "@echo off":

@set PATH=C:\Program Files\Microsoft Platform SDK for Windows Server 2003 R2\Bin;%PATH%
@set INCLUDE=C:\Program Files\Microsoft Platform SDK for Windows Server 2003 R2\Include;%INCLUDE%
@set LIB=C:\Program Files\Microsoft Platform SDK for Windows Server 2003 R2\Lib;%LIB%


Building Boost with ASIO:
-------------------------

Please see the README.boost file for instructions.

We recommend that you use the bjam tool to build Boost & ASIO for MSVC. 
Open the Visual Studio 2005 Command Prompt, change to the Boost build
directory, and type:

bjam --toolset=msvc --with-thread --with-system --with-filesystem \
	--with-regex --with-date_time --with-unit_test_framework \
	debug release threading=multi stage

You may leave out the "--with" options if you wish to build everything. 

We recommend that you create a C:\Boost directory with C:\Boost\Lib and
C:\Boost\Include subdirectories.  To install Boost into these
directories, just copy the files in stage/lib into C:\Boost\Lib, and
copy the entire boost/ directory into C:\Boost\Include.

Step-by-step instruction: building Boost with ASIO for VC2005 platform (without using UNIX utilities or commands)
-------------------------
 - Download Boost 1.35.0 (zip) from http://sourceforge.net/project/showfiles.php?group_id=7586 
 - Download BJAM precompiled executable boost-jam-3.1.16-1-ntx86.zip from http://sourceforge.net/project/showfiles.php?group_id=7586&package_id=72941 
 - Unzip boost_1_35_0.zip to C:\boost_1_35_0
 - Unzip bjam.exe from boost-jam-3.1.16-1-ntx86.zip to C:\boost_1_35_0
 - Open MSVC command line  
 - In MSVC command line:
		cd C:\boost_1_35_0
		bjam install
 - Drink lot of coffee
 .....
 - Drink lot of coffee
 - If you also want the debug versions of the Boost libraries, run:
		bjam debug install
 - Update VC2005 settings for includes (C:\Boost\include\boost-1_35) and libraries (C:\Boost\lib) paths with locations of installed Boost headers and libraries
    (Main Menu->Tools->Options->Projects and Solutions->VC++ Directories)


Installing zlib & OpenSSL:
--------------------------

ASIO requires zlib and OpenSSL for compression and SSL/TLS encryption
support, respectively.  For MSVC, we recommend that you build and
install these packages from the source tarballs, available from the
following sites:

http://www.zlib.net
http://www.openssl.org

For OpenSSL, build the static versions of ssleay32 and libeay32 (by using
nt.mak rather than ntdll.mak, as explained in INSTALL.W32).  We recommend
installing OpenSSL in C:\OpenSSL.


Linking with OpenSSL:
---------------------

Macro OPENSSL_HOME in pion.vsprops is set to C:\OpenSSL.  If you installed 
OpenSSL somewhere other than C:\OpenSSL, change OPENSSL_HOME accordingly.
If you have both the static and dynamic versions of ssleay32 and libeay32,
make sure OPENSSL_HOME\lib is the directory with the static versions.

Include PION_HAVE_SSL or PION_FULL in Preprocessor Definitions for the project,
or in PionConfig.hpp.win, uncomment '#define PION_HAVE_SSL'.

Note: While configuring OpenSSL for build, use the following command:
	perl Configure VC-WIN32 --prefix=C:\\OpenSSL 
(note double "\\" required by windows )

Logging frameworks:
-------------------

Note that the use of a logging framework is entirely optional, so you
may skip this step if you like.  If no logging option is defined, std::cout 
and std::cerr will be used for logging.  To disable logging, include 
PION_DISABLE_LOGGING in Preprocessor Definitions for the project, or in 
PionConfig.hpp.win, uncomment '#define PION_DISABLE_LOGGING'.

At this time, log4cxx (http://logging.apache.org/log4cxx) is the only 
supported logging library that builds correctly under Windows.

A binary distribution is available at http://pion.org/files/log4cxx.zip.
Install it in C:\log4cxx, or change LOG4CXX_HOME accordingly (see below).

You can also download the current source code from 
http://svn.atomiclabs.com/log4cxx/trunk
Check out to C:\log4cxx, or change LOG4CXX_HOME accordingly (see below).
Open log4cxx.sln and build everything (or just the configurations you're 
interested in).

Macro LOG4CXX_HOME in pion.vsprops is set to C:\log4cxx.  If you installed 
log4cxx somewhere other than C:\log4cxx, change LOG4CXX_HOME accordingly.

Add <LOG4CXX_HOME>\bin to your path.

Include PION_USE_LOG4CXX or PION_FULL in Preprocessor Definitions for the project,
or in PionConfig.hpp.win, uncomment '#define PION_USE_LOG4CXX'.


Building and installing Pion:
-----------------------------

Update the Visual C++ Directories in the Projects and Solutions section
in the Options dialog box.  For Include files add "C:\Boost\Include",
and for Library files add "C:\Boost\Lib".

Now you should be able to build the solution file called pion-<PROJECT>.sln.

See platform/server/README.msvc for more information about running Pion.


Running the test programs:
--------------------------

Make sure "C:\Boost\Lib" is on your path.

If you got the source code from the Subversion repository and haven't yet run
Doxygen, then run Doxygen from "<PION_NET_HOME>\doc\".  (The documentation
is used as part of the Pion Network Library tests.)

To test PionWebServer, try running it from <"PION_NET_HOME>\utils\" with
the following command line args: -c vcservices.conf

To run from within the IDE, go to PionWebServer Property Pages ->
Debugging, and set 'Command Arguments' to the above.

Note: If you didn't run Doxygen, create "<PION_NET_HOME>\doc\html\index.html" file:
		<html>
		<head>
		<title>pion-net Documentation</title>
		</head>
		<body>
			<h1>pion-net Documentation</h1>
		</body>
		</html>
Otherwise, PionWebServer and unit tests fail with "no such directory" error.

Additional libraries (required for PLATFORM build)
--------------------------
ICONV
 - download http://xmlsoft.org/sources/win32/iconv-1.9.2.win32.zip
 - open it into C:\iconv-1.9.2\

LIBXML
 - download http://xmlsoft.org/sources/win32/libxml2-2.6.30.win32.zip
 - open it into C:\libxml2-2.6.30\

SQLite
 - download http://www.sqlite.org/sqlite-amalgamation-3_5_6.zip
 - copy sqlite3.h and sqlite3ext.h from ZIP to C:\SQLite\include
 - download http://www.sqlite.org/sqlitedll-3_5_6.zip
 - copy sqlite3.dll to C:\SQLite\bin
