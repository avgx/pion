Cygwin/GNU C++ Build Instructions
=================================

For building under Windows, only the Cygwin/GNU C++ compiler (g++) and
Microsoft's Visual C++ 2005 compiler are currently supported. We plan to add
support for the MinGW compiler in the near future. Please see README.msvc for
instructions on using Microsoft's Visual C++ compiler.


Installing Cygwin Packages:
---------------------------

In order to configure Pion, you will need to install the bash shell and
GNU make programs.  We recommend that you download and install the programs
included with Cygwin from http://www.cygwin.com/.  The bash shell is included
by default; however, you will need to add the make package (it is located
within the "Devel" group).  For a complete development environment, we
recommend also installing the following Cygwin packages:

Archive: unzip zip
Devel: apr1 aprutil1 binutils autoconf automake gcc-g++ gdb libtool make
       openssl-devel libxml2 libxml2-devel subversion
Editors: nano
Net: openssh
Perl: perl
Utils: patch
Web: wget


Building Boost with ASIO:
-------------------------

Please see the README.boost file for instructions.

There is one more bug in 1.34.1 that you need to fix after building and 
installing the Boost libraries (Boost ticket #1058).  Boost names the 
"import" libraries using a format that is incompatable with GNU's 
libtool (they use the format "boost_*.dll.a" instead of 
"libboost_*.dll.a").  You can fix this by creating symbolic links for 
the libraries needed by Pion:

# cd BOOST_INSTALL_DIR/lib
# ln -s boost_thread-gcc34-mt.dll.a libboost_thread-gcc34-mt.dll.a
# ln -s boost_system-gcc34-mt.dll.a libboost_system-gcc34-mt.dll.a
# ln -s boost_filesystem-gcc34-mt.dll.a libboost_filesystem-gcc34-mt.dll.a
# ln -s boost_regex-gcc34-mt.dll.a libboost_regex-gcc34-mt.dll.a
# ln -s boost_date_time-gcc34-mt.dll.a libboost_date_time-gcc34-mt.dll.a
# ln -s boost_signals-gcc34-mt.dll.a libboost_signals-gcc34-mt.dll.a
# ln -s boost_unit_test_framekwork-gcc34-mt.dll.a libboost_unit_test_framework-gcc34-mt.dll.a

These patches may be unnecessary for Boost 1.34.2 and later releases.


Installing zlib & openssl:
--------------------------

ASIO requires zlib and openssl for compression and SSL/TLS encryption
support, respectively.  On Windows, we recommend that you use Cygwin to
install these libraries. However, you may instead choose to download and
install the latest versions from the "Third Party Libraries" page on
our website, or from the following sites:

http://www.zlib.net
http://www.openssl.org


Logging frameworks:
-------------------

Note that the use of a logging framework is entirely optional, so you may
skip this step if you like.

We recommend that you use log4cxx for logging.  Log4cxx requires that  you
have the Apache Portable Runtime (APR) installed.  On Windows, we recommend
that you use Cygwin to install APR.  However, you may instead choose to
download and install the latest source code tarballs from the "Third Party
Libraries" page on our website, or from the following site:

http://apr.apache.org

Please visit the "Third Party Libraries" page on our website to obtain
the source code tarball for log4cxx.  Then, just run:

# tar xvfj log4cxx-<version>.tar.bz2
# cd log4cxx-<version>
# ./configure
# make all
# make install


At this time, none of the supported logging libraries build correctly
under Windows.  If you'd like to help add support for these, you can
download the current source code from the following sites:

http://logging.apache.org/log4cxx
http://log4cpp.sourceforge.net
http://log4cplus.sourceforge.net



Installing libxml2:
-------------------

The Pion Platform requires the libxml2 development library for 
manipulating configuration files, and other things.  This library is not 
used by the Pion Network Library, so you may skip this step if you are 
only building the Network Library.

On Windows, we recommend that you use Cygwin to install libxml2.  However,
you may instead choose to download and install the latest source code
tarballs from the "Third Party Libraries" page on our website, or from the
following site:

http://www.xmlsoft.org


Installing OSSP uuid:
---------------------

The Pion Platform requires the OSSP uuid library to generate universally 
unique identifiers for most platforms, including Cygwin.  This library is 
not used by the Pion Network Library, so you may skip this step if you 
are only building the Network Library.

You can download the source code tarball for the uuid library from the 
"Third Party Libraries" page on our website.  After downloading it, just 
run:

# tar xvfz uuid-<version>.tar.gz
# cd uuid-<version>
# ./configure
# make all
# make install


Building and installing Pion:
-----------------------------

Now you should be able to build and install Pion:
(the "-D_WIN32_WINNT=0x500" eliminates warnings in ASIO)


# tar xvfz pion-<PROJECT>-<VERSION>.tar.gz
# cd pion-<PROJECT>-<VERSION>
# CPPFLAGS="-D_WIN32_WINNT=0x500" ./configure [--with-openssl] [--with-log4cxx]
# make all
# make install

To build and run Pion's unit tests, run "make check"


Known Problems:
---------------

The POSIX path emulation layer provided by cygwin sometimes confused the
boost::filesystem library.  Pion includes some extra code for cygwin to
try to find the path you actually want.  If you are using Pion in a
cygwin environment, you may need to configure your cygwin installation
directory using the parameter "--with-cygwin=[directory]" (the default is
"c:/cygwin").  Please see the boost::filesystem documenation for more
information: http://www.boost.org/libs/filesystem/doc/index.htm

If Windows cannot find all the shared libraries used by your program, it will
simply exit immediately without printing any messages.  To see what shared
libraries (or DLLs) a program uses, you can use the following command:

objdump -p <PROGRAM> | grep "DLL Name"

You may want to make sure that your executables can find the Boost DLLs
located in "lib" subdirectory of your installation path by adding the
directory to your PATH:

export PATH=/usr/local/lib:$PATH

(assuming that you are using the default prefix of /usr/local/lib)
